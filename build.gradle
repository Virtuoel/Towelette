plugins {
	id "fabric-loom" version "0.8-SNAPSHOT"
	id "eclipse"
	id "maven-publish"
	id "com.github.breadmoirai.github-release" version "2.2.12"
	id "com.matthewprenger.cursegradle" version "1.4.0"
	id "com.modrinth.minotaur" version "1.2.1"
}

repositories {
	mavenLocal()
	maven {
		name = "Fabric"
		url = "https://maven.fabricmc.net/"
	}
	maven {
		name = "TerraformersMC"
	//	url = "https://maven.terraformersmc.com/"
		url = "https://raw.githubusercontent.com/TerraformersMC/Archive/main/releases/"
	}
	maven {
		name = "CurseForge"
		url = "https://minecraft.curseforge.com/api/maven"
	}
	maven {
		name = "JitPack"
		url = "https://jitpack.io"
		content {
			includeGroup "com.github.Virtuoel"
		}
	}
	maven {
		name = "GitHub"
		url = "https://maven.pkg.github.com"
	}
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

def ENV = System.getenv()

group = project.maven_group
archivesBaseName = project.archives_base_name
version = project.mod_version + "+" + (ENV.BUILD_NUMBER ? "build.${ENV.BUILD_NUMBER}-" : "") + (project.hasProperty("metadata_minecraft_versions") ? project.metadata_minecraft_versions : project.minecraft_version)

if(project.hasProperty("forge_version")) {
	version += "-forge"
	
	loom {
		mixinConfig "${archives_base_name.replaceAll( /([A-Z])/, /_$1/ ).toLowerCase().replaceAll( /^_/, '' )}.mixins.json"
	}
}

minecraft {
	refmapName = "${archives_base_name}-refmap.json"
}

if(project.hasProperty("loader_version")) {
	ext.fabric_loader_version = project.loader_version
}

if(project.hasProperty("fabric_version")) {
	ext.fabric_api_version = project.fabric_version
}

dependencies {
	minecraft "com.mojang:minecraft:${minecraft_version}"
	mappings "net.fabricmc:yarn:${yarn_mappings}:v2"
	
	if(project.hasProperty("forge_version")) {
		forge "net.minecraftforge:forge:${forge_version}"
	}
	else if(project.hasProperty("fabric_loader_version")) {
		modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
		
		def excludeLoader = { exclude group: "net.fabricmc", module: "fabric-loader" }
		def excludeApi = { exclude group: "net.fabricmc.fabric-api" }
		def excludeFabric = {
			exclude group: "net.fabricmc", module: "fabric-loader"
			exclude group: "net.fabricmc.fabric-api"
		}
		
		if(project.hasProperty("fabric_api_version")) {
			if(!project.hasProperty("fabric_modules") && !project.hasProperty("api_fabric_modules") && !project.hasProperty("impl_fabric_modules")) {
				modCompileOnly "net.fabricmc.fabric-api:fabric-api:${fabric_api_version}", excludeLoader
				modRuntime "net.fabricmc.fabric-api:fabric-api:${fabric_api_version}", excludeLoader
			}
			
			if(project.hasProperty("fabric_modules")) {
				project.fabric_modules.split(", ").each { String module ->
					modCompileOnly fabricApi.module(module, project.fabric_api_version), excludeLoader
					modRuntime fabricApi.module(module, project.fabric_api_version), excludeLoader
				}
			}
			
			if(project.hasProperty("api_fabric_modules")) {
				project.api_fabric_modules.split(", ").each { String module ->
					modApi fabricApi.module(module, project.fabric_api_version), excludeLoader
				}
			}
			
			if(project.hasProperty("impl_fabric_modules")) {
				project.impl_fabric_modules.split(", ").each { String module ->
					modImplementation fabricApi.module(module, project.fabric_api_version), excludeLoader
				}
			}
			
			if(project.hasProperty("included_fabric_modules")) {
				project.included_fabric_modules.split(", ").each { String module ->
					include fabricApi.module(module, project.fabric_api_version)
				}
			}
		}
		
		if(project.hasProperty("modmenu_version")) {
			modCompileOnly "com.terraformersmc:modmenu:${modmenu_version}", excludeFabric
			modRuntime "com.terraformersmc:modmenu:${modmenu_version}", excludeFabric
		}
		
		if(project.hasProperty("statement_version")) {
			modApi("virtuoel:Statement:${statement_version}", excludeFabric)
		}
		
		if(project.hasProperty("statement_tag")) {
			modApi("com.github.Virtuoel:Statement:${statement_tag}", excludeFabric)
		}
	}
}

processResources {
	inputs.property "version", project.version
	
	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
	
	filesMatching("META-INF/mods.toml") {
		expand "version": project.version
	}
}

def proj = project
eclipse {
	project {
		name = archives_base_name
		buildCommand "org.eclipse.buildship.core.gradleprojectbuilder"
		natures "org.eclipse.buildship.core.gradleprojectnature"
	}
	if(!proj.hasProperty("forge_version") || ((minecraft_version.split(/\./, -1)[1] as Integer) >= 17)) {
		jdt {
			javaRuntimeName = "JavaSE-16"
		}
	}
}

tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

jar {
	from "LICENSE"
	manifest
	{
		attributes "Implementation-Title": project.archivesBaseName
		attributes "Implementation-Version": project.version
		attributes "Maven-Artifact": "${project.group}:${project.archivesBaseName}:${project.version}"
		attributes "Built-On-Minecraft": "${project.minecraft_version}"
		attributes "Built-On-Java": "${System.getProperty("java.vm.version")} (${System.getProperty("java.vm.vendor")})"
	}
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
	exclude "fabric.mod.json"
	exclude "META-INF/mods.toml"
	manifest
	{
		attributes "Implementation-Title": project.archivesBaseName + "-sources"
		attributes "Implementation-Version": project.version
		attributes "Maven-Artifact": "${project.group}:${project.archivesBaseName}:${project.version}:sources"
		attributes "Built-On-Minecraft": "${project.minecraft_version}"
		attributes "Built-On-Java": "${System.getProperty("java.vm.version")} (${System.getProperty("java.vm.vendor")})"
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				classifier = "sources"
				builtBy remapSourcesJar
			}
		}
	}
	
	repositories {
		mavenLocal()
		if(project.hasProperty("github_maven_owner")) {
			maven {
				url = "https://maven.pkg.github.com/${github_maven_owner}"
				
				credentials {
					username project.properties.github_username
					password project.properties.github_packages_token
				}
			}
		}
	}
}

githubRelease {
	token project.hasProperty("github_releases_token") ? project.github_releases_token : ""
	if(project.hasProperty("github_repository_owner")) {
		owner project.github_repository_owner
	}
	if(project.hasProperty("github_repository")) {
		repo project.github_repository
	}
	
	if(project.hasProperty("forge_version")) {
		tagName project.mod_version + "-forge"
	}
	
	if(project.hasProperty("loader_version")) {
		tagName project.mod_version
	}
	
	if(project.hasProperty("github_branch")) {
		targetCommitish project.github_branch
	}
	
	releaseName project.version
	
	releaseAssets = files("${project.buildDir}/libs/${archivesBaseName}-${version}.jar", "${project.buildDir}/libs/${archivesBaseName}-${version}-sources.jar").files
}

if(project.hasProperty("fabric_api_version")) {
	ext.changelog_fabric_api_version = project.fabric_api_version
}

String generateHTMLChangelog() {
	String changelog_text = ""
	
	File file = file("changelog.txt")
	if(file.exists())
	{
		file.eachLine { String line ->
			if(!line.isAllWhitespace())
			{
				changelog_text += "<p>${line.stripIndent()}</p>\n"
			}
		}
		changelog_text += "<p>&nbsp;</p>\n"
	}
	
	changelog_text += "<p>Last successfully tested on:</p>\n"
	changelog_text += "<p>Minecraft version <code>${minecraft_version}</code></p>\n"
	
	if(project.hasProperty("forge_version")) {
		changelog_text += "<p>Forge <code>${forge_version}</code></p>\n"
	}
	
	if(project.hasProperty("fabric_loader_version")) {
		changelog_text += "<p>Fabric Loader <code>${fabric_loader_version}</code></p>\n"
	}
	
	changelog_text += "<p>Yarn mappings <code>${yarn_mappings}</code></p>\n"
	
	if(project.hasProperty("changelog_fabric_api_version")) {
		changelog_text += "<p><a href=\"https://www.curseforge.com/minecraft/mc-mods/fabric-api/files/all\" rel=\"nofollow\">Fabric API <code>${changelog_fabric_api_version}</code></a></p>\n"
	}
	
	return changelog_text
}

curseforge {
	if(project.hasProperty("curseforge_api_key")) {
		apiKey = project.properties.curseforge_api_key
	}
	
	if(project.hasProperty("curseforge_id")) {
		project {
			id = project.curseforge_id
			
			releaseType = project.curseforge_release_type
			
			if(project.hasProperty("curseforge_mod_loaders")) {
				project.curseforge_mod_loaders.split(", ").each { String loader ->
					addGameVersion loader
				}
			}
			
			def display_name_prefix = ""
			if(project.hasProperty("curseforge_release_versions")) {
				def game_versions = project.curseforge_release_versions.split(", ")
				display_name_prefix = "[${game_versions[0]} - ${game_versions[-1].split("-")[0]}] "
				if(game_versions[0] == game_versions[-1].split("-")[0]) {
					display_name_prefix = "[${game_versions[0]}]"
				}
				game_versions.each { String gameVersion ->
					addGameVersion gameVersion
				}
			}
			
			if(project.hasProperty("forge_version")) {
				display_name_prefix += " [Forge] "
			}
			
			mainArtifact(remapJar) {
				displayName = "${display_name_prefix}${archives_base_name} ${project.mod_version}"
				
				if(project.hasProperty("curseforge_required_dep_slugs") || project.hasProperty("curseforge_embedded_lib_slugs") || project.hasProperty("curseforge_optional_dep_slugs") || project.hasProperty("curseforge_compatible_tool_slugs") || project.hasProperty("curseforge_incompatible_slugs")) {
					relations {
						if(project.hasProperty("curseforge_required_dep_slugs")) {
							project.curseforge_required_dep_slugs.split(", ").each { String slug ->
								requiredDependency slug
							}
						}
						
						if(project.hasProperty("curseforge_embedded_lib_slugs")) {
							project.curseforge_embedded_lib_slugs.split(", ").each { String slug ->
								embeddedLibrary slug
							}
						}
						
						if(project.hasProperty("curseforge_optional_dep_slugs")) {
							project.curseforge_optional_dep_slugs.split(", ").each { String slug ->
								optionalDependency slug
							}
						}
						
						if(project.hasProperty("curseforge_compatible_tool_slugs")) {
							project.curseforge_compatible_tool_slugs.split(", ").each { String slug ->
								tool slug
							}
						}
						
						if(project.hasProperty("curseforge_incompatible_slugs")) {
							project.curseforge_incompatible_slugs.split(", ").each { String slug ->
								incompatible slug
							}
						}
					}
				}
				
				changelogType = "html"
				changelog = project.generateHTMLChangelog()
			}
			
			addArtifact(sourcesJar) {
				displayName = "${archives_base_name} ${project.mod_version} Source Code"
			}
			
			afterEvaluate {
				uploadTask.dependsOn remapSourcesJar
			}
		}
		options {
			forgeGradleIntegration = false
		}
	}
}

import com.modrinth.minotaur.TaskModrinthUpload

task publishModrinth (type: TaskModrinthUpload) {
	if(project.hasProperty("modrinth_token")) {
		token = project.properties.modrinth_token
	}
	
	if(project.hasProperty("modrinth_id")) {
		projectId = project.modrinth_id
		
		versionType = project.modrinth_version_type
		
		if(project.hasProperty("modrinth_mod_loaders")) {
			project.modrinth_mod_loaders.split(", ").each { String loader ->
				addLoader loader
			}
		}
		
		if(project.hasProperty("modrinth_release_versions")) {
			project.modrinth_release_versions.split(", ").each { String gameVersion ->
				addGameVersion gameVersion
			}
		}
		
		if(project.hasProperty("modrinth_required_dep_ids")) {
			project.modrinth_required_dep_ids.split(", ").each { String slug ->
				addDependency(slug, "required")
			}
		}
		
		if(project.hasProperty("modrinth_optional_dep_ids")) {
			project.modrinth_optional_dep_ids.split(", ").each { String slug ->
				addDependency(slug, "optional")
			}
		}
		
		if(project.hasProperty("modrinth_incompatible_dep_ids")) {
			project.modrinth_incompatible_dep_ids.split(", ").each { String slug ->
				addDependency(slug, "incompatible")
			}
		}
		
		versionName = "${archives_base_name} ${project.mod_version}"
		
		versionNumber = project.version
		
		uploadFile = remapJar
		addFile sourcesJar
	}
}
