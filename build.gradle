plugins {
	id "fabric-loom" version "0.2.5-SNAPSHOT"
	id "eclipse"
	id "maven-publish"
	id "com.github.breadmoirai.github-release" version "2.2.9"
	id "org.ajoberstar.grgit" version "3.1.1"
	id "com.matthewprenger.cursegradle" version "1.4.0"
}

repositories {
	mavenLocal()
	maven {
		name = "Fabric"
		url = "https://maven.fabricmc.net/"
	}
	maven {
		name = "CurseForge"
		url = "https://minecraft.curseforge.com/api/maven"
	}
	maven {
		name = "JitPack"
		url = "https://jitpack.io"
	}
	maven {
		name = "GitHub"
		url = "https://maven.pkg.github.com"
	}
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

group = project.maven_group
archivesBaseName = project.archives_base_name
version = project.mod_version

def ENV = System.getenv()
version = version + (ENV.BUILD_NUMBER ? ("+build." + ENV.BUILD_NUMBER) : "")

minecraft {
	refmapName = "${archives_base_name}-refmap.json"
}

dependencies {
	minecraft "com.mojang:minecraft:${minecraft_version}"
	mappings "net.fabricmc:yarn:${yarn_mappings}"
	
	modImplementation "net.fabricmc:fabric-loader:${loader_version}"
	if(project.hasProperty("fabric_version")) {
		modCompileOnly "net.fabricmc.fabric-api:fabric-api:${fabric_version}"
	}
	
	if(project.hasProperty("fabric_modules")) {
		project.fabric_modules.split(", ").each { String module ->
			modCompileOnly "net.fabricmc.fabric-api:${module}"
		}
	}
	
	if(project.hasProperty("api_fabric_modules")) {
		project.api_fabric_modules.split(", ").each { String module ->
			modApi "net.fabricmc.fabric-api:${module}"
		}
	}
	
	if(project.hasProperty("impl_fabric_modules")) {
		project.impl_fabric_modules.split(", ").each { String module ->
			modImplementation "net.fabricmc.fabric-api:${module}"
		}
	}
	
	if(project.hasProperty("included_fabric_modules")) {
		project.included_fabric_modules.split(", ").each { String module ->
			include "net.fabricmc.fabric-api:${module}"
		}
	}
	
	compileOnly "com.google.code.findbugs:jsr305:${jsr305_version}"
	
	if(project.hasProperty("modmenu_version")) {
		modCompileOnly("io.github.prospector:modmenu:${modmenu_version}") {
			transitive = false
		}
	}
	
	if(project.hasProperty("statement_version")) {
		modApi("virtuoel:Statement:${statement_version}") {
			transitive = false
		}
		include "virtuoel:Statement:${statement_version}"
	}
	
	if(project.hasProperty("statement_commit")) {
		modApi("com.github.Virtuoel:Statement:${statement_commit}") {
			transitive = false
		}
		include "com.github.Virtuoel:Statement:${statement_commit}"
	}
}

processResources {
	inputs.property "version", project.version
	
	from(sourceSets.main.resources.srcDirs) {
		include "fabric.mod.json"
		expand "version": project.version
	}
	
	from(sourceSets.main.resources.srcDirs) {
		exclude "fabric.mod.json"
	}
}

eclipse {
	project {
		name = archives_base_name
	}
}

tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

jar {
	from "LICENSE"
	manifest
	{
		attributes "Implementation-Title": project.archivesBaseName
		attributes "Implementation-Version": project.version
		attributes "Maven-Artifact": "${project.group}:${project.archivesBaseName}:${project.version}"
		attributes "Built-On-Minecraft": "${project.minecraft_version}"
		attributes "Built-On-Java": "${System.getProperty("java.vm.version")} (${System.getProperty("java.vm.vendor")})"
	}
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
	manifest
	{
		attributes "Implementation-Title": project.archivesBaseName + "-sources"
		attributes "Implementation-Version": project.version
		attributes "Maven-Artifact": "${project.group}:${project.archivesBaseName}:${project.version}:sources"
		attributes "Built-On-Minecraft": "${project.minecraft_version}"
		attributes "Built-On-Java": "${System.getProperty("java.vm.version")} (${System.getProperty("java.vm.vendor")})"
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				classifier = "sources"
				builtBy remapSourcesJar
			}
		}
	}
	
	repositories {
		mavenLocal()
		if(project.hasProperty("github_maven_owner")) {
			maven {
				url = "https://maven.pkg.github.com/${github_maven_owner}"
				
				credentials {
					username project.properties.github_username
					password project.properties.github_packages_token
				}
			}
		}
	}
}

githubRelease {
	token project.hasProperty("github_releases_token") ? project.github_releases_token : ""
	if(project.hasProperty("github_repository_owner")) {
		owner project.github_repository_owner
	}
	if(project.hasProperty("github_repository")) {
		repo project.github_repository
	}
	
	tagName "v${minecraft_version}-${project.version}"
	targetCommitish { org.ajoberstar.grgit.Grgit.open(dir: '.').branch.current().name }
	releaseName "${archives_base_name}-${minecraft_version}-${project.version}.jar"
}

String generateHTMLChangelog() {
	String changelog_text = ""
	
	File file = file("changelog.txt")
	if(file.exists())
	{
		file.eachLine { String line ->
			if(!line.isAllWhitespace())
			{
				changelog_text += "<p>${line.stripIndent()}</p>\n"
			}
		}
		changelog_text += "<p>&nbsp;</p>\n"
	}
	
	changelog_text += "<p>Last successfully tested on:</p>\n<p>Minecraft version <code>${minecraft_version}</code></p>\n<p>Yarn mappings <code>${yarn_mappings}</code></p>\n<p>Fabric-Loader <code>${loader_version}</code></p>\n"
	
	if(project.hasProperty("fabric_version")) {
		changelog_text += "<p><a href=\"https://www.curseforge.com/minecraft/mc-mods/fabric-api/files/all\" rel=\"nofollow\">Fabric API <code>${fabric_version}</code></a></p>\n"
	}
	
	return changelog_text
}

curseforge {
	if(project.hasProperty("curseforge_api_key")) {
		apiKey = project.properties.curseforge_api_key
	}
	
	if(project.hasProperty("curseforge_id")) {
		project {
			id = project.properties.curseforge_id
			
			releaseType = project.release_type
			addGameVersion project.release_version
			addGameVersion "Fabric"
			
			mainArtifact(remapJar) {
				displayName = "${archives_base_name}-${minecraft_version}-${project.version}.jar"
				
				relations {
					if(project.hasProperty("required_dep_slugs")) {
						project.required_dep_slugs.split(", ").each { String slug ->
							requiredDependency slug
						}
					}
					
					if(project.hasProperty("embedded_lib_slugs")) {
						project.embedded_lib_slugs.split(", ").each { String slug ->
							embeddedLibrary slug
						}
					}
					
					if(project.hasProperty("optional_dep_slugs")) {
						project.optional_dep_slugs.split(", ").each { String slug ->
							optionalDependency slug
						}
					}
					
					if(project.hasProperty("compatible_tool_slugs")) {
						project.compatible_tool_slugs.split(", ").each { String slug ->
							tool slug
						}
					}
					
					if(project.hasProperty("incompatible_slugs")) {
						project.incompatible_slugs.split(", ").each { String slug ->
							incompatible slug
						}
					}
				}
				
				changelogType = "html"
				changelog = project.generateHTMLChangelog()
			}
			
			addArtifact(sourcesJar) {
				displayName = "${archives_base_name}-${minecraft_version}-${project.version}-sources.jar"
			}
			
			afterEvaluate {
				uploadTask.dependsOn remapSourcesJar
			}
		}
		options {
			forgeGradleIntegration = false
		}
	}
}
